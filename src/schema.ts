/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/impression/create": {
    /**
     * CreateImpression 
     * @description Create Impression
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid access token */
            accessToken: string;
            /** @description NCC user ID */
            uuid: string;
            /** @description Valid Algorand address of creator */
            creatorAddress: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO fix this */
                message: string;
              };
              error: {
                /** @description Message of error, TODO fix this nested obj */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/impression/update-all": {
    /**
     * UpdateAllImpressions 
     * @description Updates all Impressions
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid access token */
            accessToken: string;
            /** @description NCC user ID */
            uuid: string;
            /** @description Unique */
            unique: number;
            /** @description Total */
            total: number;
            /** @description Exposure */
            exposure: number;
            /** @description Engagement */
            engagement: number;
            /** @description Conversion */
            conversion: number;
            /** @description Relevence */
            relevence: number;
            /** @description Revenue */
            revenue: number;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO fix this */
                message: string;
              };
              error: {
                /** @description Message of error, TODO fix this nested obj */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/impression/update-one": {
    /**
     * UpdateOneImpression 
     * @description Updates one Impression
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid access token */
            accessToken: string;
            /** @description NCC user ID */
            uuid: string;
            /** @description Field */
            field: string;
            /** @description Value */
            value: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO fix this */
                message: string;
              };
              error: {
                /** @description Message of error, TODO fix this nested obj */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/linr/media": {
    /**
     * LinrMedia 
     * @description Ask LiNR media engine
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Question */
            qText: string;
            /** @description Context */
            ctx: string;
            /** @description Response length */
            respLength: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO fix this */
                message: string;
              };
              error: {
                /** @description Message of error, TODO fix this nested obj */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/linr/music": {
    /**
     * LinrMusic 
     * @description Ask LiNR music engine
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Question */
            qText: string;
            /** @description Context */
            ctx: string;
            /** @description Response length */
            respLength: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO fix this */
                message: string;
              };
              error: {
                /** @description Message of error, TODO fix this nested obj */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/peels/create": {
    /**
     * CreatePeels 
     * @description Create peels contract
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Name of Peels contract */
            name: string;
            /** @description Metadata */
            meta: string;
            /** @description Associated URL */
            url: string;
            /** @description Creator address */
            creatorAddress: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              data: {
                /** @description Algonaut transaction status, one of 'success' | 'fail' | 'rejected' */
                status: string;
                /** @description Message */
                message: string;
                /** @description Index of contract */
                index?: number;
                /** @description Transaction ID */
                txId: string;
                /** @description Metadata */
                meta?: string;
                /** @description Created app index */
                createdIndex?: number;
              };
              error?: {
                /** @description Error object */
                message?: string;
              };
            };
          };
        };
      };
    };
  };
  "/peels/fund-user": {
    /**
     * FundsUser 
     * @description Funds a user
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Address to be funded */
            address: string;
            /** @description Index of contract */
            contractId: string;
            /** @description Challenge */
            challenge: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Algonaut transaction status, one of 'success' | 'fail' | 'rejected' */
                status: string;
                /** @description Message */
                message: string;
                /** @description Index of contract */
                index?: number;
                /** @description Transaction ID */
                txId: string;
                /** @description Metadata */
                meta?: string;
                /** @description Created app index */
                createdIndex?: number;
              };
              error: {
                /** @description Error message */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/peels/get": {
    /**
     * GetPeel 
     * @description Get Peel
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Contract ID */
            contractId: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              data: ({
                  /** @description ID */
                  id: string;
                  /** @description Address */
                  address: string;
                  /** @description Name */
                  name: string;
                  /** @description meta */
                  meta: string;
                  /** @description url */
                  url: string;
                  /** @description Is it minted? */
                  isMinted: string;
                  /** @description Index of token */
                  tokenIndex: string;
                  /** @description Status */
                  status: string;
                  /** @description Address of creator */
                  creator_address: string;
                  /** @description Access token of creator */
                  creator_token: string;
                  /** @description Updated at */
                  updatedAt: string;
                })[];
            };
          };
        };
      };
    };
  };
  "/peels/grant": {
    /**
     * GrantsPeel 
     * @description Grants a Peel
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description App index of Peels */
            appId: number;
            /** @description Address of grantee */
            grantToAddress: string;
            /** @description Total units to be granted */
            totalGrant: number;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              data: {
                /** @description Algonaut transaction status, one of 'success' | 'fail' | 'rejected' */
                status: string;
                /** @description Message */
                message: string;
                /** @description Index of contract */
                index?: number;
                /** @description Transaction ID */
                txId: string;
                /** @description Metadata */
                meta?: string;
                /** @description Created app index */
                createdIndex?: number;
              };
              error?: {
                /** @description Error object */
                message?: string;
              };
            };
          };
        };
      };
    };
  };
  "/peels/grant-tokens": {
    /**
     * GrantsPeelToken 
     * @description Grants Peel tokens
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description App index of Peels */
            appId: number;
            /** @description Address of grantee */
            grantToAddress: string;
            /** @description Index of toekn */
            tokenId: number;
            /** @description Total tokens to be granted */
            totalTokens: number;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              data: {
                /** @description Algonaut transaction status, one of 'success' | 'fail' | 'rejected' */
                status: string;
                /** @description Message */
                message: string;
                /** @description Index of contract */
                index?: number;
                /** @description Transaction ID */
                txId: string;
                /** @description Metadata */
                meta?: string;
                /** @description Created app index */
                createdIndex?: number;
              };
              error?: {
                /** @description Error object */
                message?: string;
              };
            };
          };
        };
      };
    };
  };
  "/peels/list-all": {
    /**
     * ListAllPeels 
     * @description List all Peels
     */
    post: {
      requestBody: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              data: ({
                  /** @description ID */
                  id: string;
                  /** @description Address */
                  address: string;
                  /** @description Name */
                  name: string;
                  /** @description meta */
                  meta: string;
                  /** @description url */
                  url: string;
                  /** @description Is it minted? */
                  isMinted: string;
                  /** @description Index of token */
                  tokenIndex: string;
                  /** @description Status */
                  status: string;
                  /** @description Address of creator */
                  creator_address: string;
                  /** @description Access token of creator */
                  creator_token: string;
                  /** @description Updated at */
                  updatedAt: string;
                })[];
            };
          };
        };
      };
    };
  };
  "/peels/list-mine": {
    /**
     * ListMyPeels 
     * @description List My Peels
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Contract IDs */
            contractIds: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              data: ({
                  /** @description ID */
                  id: string;
                  /** @description Address */
                  address: string;
                  /** @description Name */
                  name: string;
                  /** @description meta */
                  meta: string;
                  /** @description url */
                  url: string;
                  /** @description Is it minted? */
                  isMinted: string;
                  /** @description Index of token */
                  tokenIndex: string;
                  /** @description Status */
                  status: string;
                  /** @description Address of creator */
                  creator_address: string;
                  /** @description Access token of creator */
                  creator_token: string;
                  /** @description Updated at */
                  updatedAt: string;
                })[];
            };
          };
        };
      };
    };
  };
  "/peels/list": {
    /**
     * ListPeels 
     * @description List Peels
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Address of Peels creator */
            creatorAddress: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              data: ({
                  /** @description ID */
                  id: string;
                  /** @description Address */
                  address: string;
                  /** @description Name */
                  name: string;
                  /** @description meta */
                  meta: string;
                  /** @description url */
                  url: string;
                  /** @description Is it minted? */
                  isMinted: string;
                  /** @description Index of token */
                  tokenIndex: string;
                  /** @description Status */
                  status: string;
                  /** @description Address of creator */
                  creator_address: string;
                  /** @description Access token of creator */
                  creator_token: string;
                  /** @description Updated at */
                  updatedAt: string;
                })[];
            };
          };
        };
      };
    };
  };
  "/peels/mint": {
    /**
     * MintsPeel 
     * @description Mints a Peel
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description App index of Peels */
            appId: number;
            /** @description Name of Peels */
            tokenName: string;
            /** @description URL of token */
            tokenUrl: string;
            /** @description Number of total tokens */
            totalTokens: number;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              data: {
                /** @description Algonaut transaction status, one of 'success' | 'fail' | 'rejected' */
                status: string;
                /** @description Message */
                message: string;
                /** @description Index of contract */
                index?: number;
                /** @description Transaction ID */
                txId: string;
                /** @description Metadata */
                meta?: string;
                /** @description Created app index */
                createdIndex?: number;
              };
              error?: {
                /** @description Error object */
                message?: string;
              };
            };
          };
        };
      };
    };
  };
  "/ttm/receive": {
    /**
     * ReceiveTTM 
     * @description Receive TTM
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description UUID of active NCC user */
            uuid: string;
            /** @description Last blockchain round to search */
            lastRound: number;
            config: {
              /** @description TTM config, TODO fix this; Swagger needs nested objects to be defined */
              todo: string;
            };
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: Record<string, never>;
              error: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/ttm/relay": {
    /**
     * RelayTTM 
     * @description Relay TTM
     */
    post: {
      requestBody: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      responses: {
        200: never;
      };
    };
  };
  "/ttm/send": {
    /**
     * SendTTM 
     * @description Send TTM
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description UUID of active NCC user */
            uuid: string;
            /** @description ASA ID of token to target */
            tokenToTarget: number;
            /** @description Message to send */
            message: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: Record<string, never>;
              error: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/get-access-token": {
    /**
     * GetAccessToken 
     * @description Get access token
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Algorand address of user */
            address: string;
            /** @description ID of signed atomic transaction to get NCC token */
            txId: string;
            /** @description Base64 encoded string of signed transaction */
            signedTx: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description The access token */
                token: string;
                /** @description Date of expiry (ms since epoch) */
                expires: number;
              };
              error: {
                /**
                 * @description Error message
                 * 
                 * If the address already has an access token, just return that
                 * 
                 * MainNet NCC token is: 1089370737
                 * MainNet SLA is: 1090801931
                 */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/user/deregister": {
    /**
     * DeregisterUser 
     * @description Deregister an NCC user
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Active NCC user uuid to de-register */
            uuid: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description String of result, TODO fix this to be accurate */
                message: string;
              };
              error: {
                /** @description String of error, TODO fix this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/list-accounts": {
    /**
     * ListAccounts 
     * @description List accounts
     */
    post: {
      parameters: {
        query: {
          /** @description Pagination limit, defaults to 10 */
          limit: string;
          /** @description Page, defaults to 1 */
          page: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Algorand address of creator */
            creatorAddress: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/user/opt-into-app": {
    /**
     * OptUserApp 
     * @description Opt user account into app
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Active NCC user uuid to opt-in */
            uuid: string;
            /** @description ID of app to opt-in */
            appId: number;
            /** @description Comma-separated string of app arguments, up to 8 */
            appArgs: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO fix this */
                message: string;
              };
              error: {
                /** @description Message of error, TODO fix this nested obj */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/user/opt-into-token": {
    /**
     * OptUserToken 
     * @description Opt user account into token
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Active NCC user uuid to opt-in */
            uuid: string;
            /** @description ID of asset to opt-in, defaults to Algo */
            asaId: number;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO fix this nested obj */
                message: string;
              };
              error: {
                /** @description Message of error, TODO fix this nested obj */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/user/register": {
    /**
     * RegisterUser 
     * @description Register a user account
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Active NCC user uuid */
            uuid: string;
            /** @description Algorand address of creator */
            creatorAddress: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO fix this */
                message: string;
              };
              error: {
                /** @description Message of error, TODO fix this nested obj */
                message: string;
              };
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export type components = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
