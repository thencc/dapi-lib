/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/bricks/deploy-media": {
    /**
     * DeployMedia 
     * @description Deploy Media
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description UUID of active NCC user */
            uuid: string;
            /** @description Name of media */
            name: string;
            /** @description Metadata of media */
            metadata: string;
            /** @description Price of media */
            price: number;
            /** @description Public performance price of media */
            publicPerformancePrice: number;
            /** @description Creator's Algorand address */
            creatorAddress: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/bricks/list": {
    /**
     * ListBricks 
     * @description List Bricks
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Creator's Algonaut address */
            creatorAddress: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/bricks/send": {
    /**
     * SendBricks 
     * @description Send Bricks
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Active NCC user uuid */
            uuid: string;
            /** @description Amount of Bricks to send */
            amount: number;
            /** @description Recipient address of transaction */
            toAddress: string;
            /** @description App index */
            toAppIndex: number;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/bricks/send-rick": {
    /**
     * SendRicks 
     * @description Send Ricks
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Active NCC user uuid */
            uuid: string;
            /** @description Amount of Ricks to send */
            amount: number;
            /** @description Recipient address of transaction */
            toAddress: string;
            /** @description App index */
            toAppIndex: number;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/linr/media": {
    /**
     * LiNRMedia 
     * @description LiNR Media
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Question to ask LiNR */
            qText: string;
            /** @description Context to provide LiNR */
            ctx: string;
            /** @description Length of response */
            respLength: number;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/linr/music": {
    /**
     * LiNRMusic 
     * @description LiNR Music
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Question to ask LiNR */
            qText: string;
            /** @description Context to provide LiNR */
            ctx: string;
            /** @description Length of response */
            respLength: number;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/rodeo/milestone/{id}": {
    /**
     * MilestoneValidateAdmin 
     * @description Validates admin privileges for milestone
     */
    post: {
      parameters: {
        query: {
          /** @description App index of milestone to check */
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description For this endpoint, route is 'isAdmin' */
            route: string;
            /** @description UUID of active NCC user */
            uuid: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/rodeo/milestone/create": {
    /**
     * MilestoneCreate 
     * @description Creates a new milestone
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description For this endpoint, route is 'create' */
            route: string;
            /** @description UUID of active NCC user */
            uuid: string;
            /** @description Algorand address of milestone creator */
            creatorAddress: string;
            /** @description URL of new milestone */
            url: string;
            /** @description Title of new milestone */
            title: string;
            /** @description Description of new milestone */
            description: string;
            /** @description Data of new milestone */
            data: string;
            /** @description Project ID to associate new project */
            project_id: string;
            /** @description UUID of NCC user to be approver of milestone */
            approverUUID: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/rodeo/milestone/all": {
    /**
     * MilestoneFetchByProject 
     * @description Fetches all milestones by project
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description For this endpoint, route is 'fetchByProjectId' */
            route: string;
            /** @description UUID of active NCC user */
            uuid: string;
            /** @description Project index associated with milestones to be fetched */
            project_id: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/rodeo/test": {
    /**
     * FetchAllOrgs 
     * @description Get all orgs
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Active NCC user uuid */
            uuid: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/rodeo/org/{name}": {
    /**
     * OrgUpdate 
     * @description Updates an existing organization
     */
    post: {
      parameters: {
        query: {
          /** @description Name of organization to update */
          name: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description For this endpoint, route is 'update' */
            route: string;
            /** @description UUID of active NCC user */
            uuid: string;
            edits: {
              /** @description Data to update in organization, TODO update this to be accurate */
              data: string;
            };
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/rodeo/org/create": {
    /**
     * OrgCreate 
     * @description Create new Rodeo organization
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Name of organization */
            orgName: string;
            /** @description Url of organization */
            url: string;
            /** @description Description of organization */
            description: string;
            /** @description Number of total members */
            totalMembers: string;
            /** @description Number of total admins */
            totalAdmins: string;
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Algorand address of organization creator */
            creatorAddress: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/rodeo/org/{appId}": {
    /**
     * OrgFetchByAppId 
     * @description Fetch organization by app ID
     */
    post: {
      parameters: {
        query: {
          /** @description App index of organization to fetch */
          appId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description The route value of this endpoint is 'fetchByAppId' */
            route: string;
            /** @description UUID of active NCC user */
            uuid: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/peels/create": {
    /**
     * CreatePeels 
     * @description Create peels contract
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Name of Peels contract */
            name: string;
            /** @description Metadata */
            meta: string;
            /** @description Associated URL */
            url: string;
            /** @description Creator address */
            creatorAddress: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              data: {
                /** @description Algonaut transaction status, one of 'success' | 'fail' | 'rejected' */
                status: string;
                /** @description Message */
                message: string;
                /** @description Index of contract */
                index?: number;
                /** @description Transaction ID */
                txId: string;
                /** @description Metadata */
                meta?: string;
                /** @description Created app index */
                createdIndex?: number;
              };
              error?: {
                /** @description Error object */
                message?: string;
              };
            };
          };
        };
      };
    };
  };
  "/peels/fund-user": {
    /**
     * FundsUser 
     * @description Funds a user
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Address to be funded */
            address: string;
            /** @description Index of contract */
            contractId: string;
            /** @description Challenge */
            challenge: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Algonaut transaction status, one of 'success' | 'fail' | 'rejected' */
                status: string;
                /** @description Message */
                message: string;
                /** @description Index of contract */
                index?: number;
                /** @description Transaction ID */
                txId: string;
                /** @description Metadata */
                meta?: string;
                /** @description Created app index */
                createdIndex?: number;
              };
              error: {
                /** @description Error message */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/peels/get": {
    /**
     * GetPeel 
     * @description Get Peel
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Contract ID */
            contractId: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              data: ({
                  /** @description ID */
                  id: string;
                  /** @description Address */
                  address: string;
                  /** @description Name */
                  name: string;
                  /** @description meta */
                  meta: string;
                  /** @description url */
                  url: string;
                  /** @description Is it minted? */
                  isMinted: string;
                  /** @description Index of token */
                  tokenIndex: string;
                  /** @description Status */
                  status: string;
                  /** @description Address of creator */
                  creator_address: string;
                  /** @description Access token of creator */
                  creator_token: string;
                  /** @description Updated at */
                  updatedAt: string;
                })[];
            };
          };
        };
      };
    };
  };
  "/peels/grant": {
    /**
     * GrantsPeel 
     * @description Grants a Peel
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description App index of Peels */
            appId: number;
            /** @description Address of grantee */
            grantToAddress: string;
            /** @description Total units to be granted */
            totalGrant: number;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              data: {
                /** @description Algonaut transaction status, one of 'success' | 'fail' | 'rejected' */
                status: string;
                /** @description Message */
                message: string;
                /** @description Index of contract */
                index?: number;
                /** @description Transaction ID */
                txId: string;
                /** @description Metadata */
                meta?: string;
                /** @description Created app index */
                createdIndex?: number;
              };
              error?: {
                /** @description Error object */
                message?: string;
              };
            };
          };
        };
      };
    };
  };
  "/peels/grant-tokens": {
    /**
     * GrantsPeelToken 
     * @description Grants Peel tokens
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description App index of Peels */
            appId: number;
            /** @description Address of grantee */
            grantToAddress: string;
            /** @description Index of toekn */
            tokenId: number;
            /** @description Total tokens to be granted */
            totalTokens: number;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              data: {
                /** @description Algonaut transaction status, one of 'success' | 'fail' | 'rejected' */
                status: string;
                /** @description Message */
                message: string;
                /** @description Index of contract */
                index?: number;
                /** @description Transaction ID */
                txId: string;
                /** @description Metadata */
                meta?: string;
                /** @description Created app index */
                createdIndex?: number;
              };
              error?: {
                /** @description Error object */
                message?: string;
              };
            };
          };
        };
      };
    };
  };
  "/peels/list-all": {
    /**
     * ListAllPeels 
     * @description List all Peels
     */
    post: {
      requestBody: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              data: ({
                  /** @description ID */
                  id: string;
                  /** @description Address */
                  address: string;
                  /** @description Name */
                  name: string;
                  /** @description meta */
                  meta: string;
                  /** @description url */
                  url: string;
                  /** @description Is it minted? */
                  isMinted: string;
                  /** @description Index of token */
                  tokenIndex: string;
                  /** @description Status */
                  status: string;
                  /** @description Address of creator */
                  creator_address: string;
                  /** @description Access token of creator */
                  creator_token: string;
                  /** @description Updated at */
                  updatedAt: string;
                })[];
            };
          };
        };
      };
    };
  };
  "/peels/list-mine": {
    /**
     * ListMyPeels 
     * @description List My Peels
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Contract IDs */
            contractIds: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              data: ({
                  /** @description ID */
                  id: string;
                  /** @description Address */
                  address: string;
                  /** @description Name */
                  name: string;
                  /** @description meta */
                  meta: string;
                  /** @description url */
                  url: string;
                  /** @description Is it minted? */
                  isMinted: string;
                  /** @description Index of token */
                  tokenIndex: string;
                  /** @description Status */
                  status: string;
                  /** @description Address of creator */
                  creator_address: string;
                  /** @description Access token of creator */
                  creator_token: string;
                  /** @description Updated at */
                  updatedAt: string;
                })[];
            };
          };
        };
      };
    };
  };
  "/peels/list": {
    /**
     * ListPeels 
     * @description List Peels
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Address of Peels creator */
            creatorAddress: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              data: ({
                  /** @description ID */
                  id: string;
                  /** @description Address */
                  address: string;
                  /** @description Name */
                  name: string;
                  /** @description meta */
                  meta: string;
                  /** @description url */
                  url: string;
                  /** @description Is it minted? */
                  isMinted: string;
                  /** @description Index of token */
                  tokenIndex: string;
                  /** @description Status */
                  status: string;
                  /** @description Address of creator */
                  creator_address: string;
                  /** @description Access token of creator */
                  creator_token: string;
                  /** @description Updated at */
                  updatedAt: string;
                })[];
            };
          };
        };
      };
    };
  };
  "/peels/mint": {
    /**
     * MintsPeel 
     * @description Mints a Peel
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description App index of Peels */
            appId: number;
            /** @description Name of Peels */
            tokenName: string;
            /** @description URL of token */
            tokenUrl: string;
            /** @description Number of total tokens */
            totalTokens: number;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              data: {
                /** @description Algonaut transaction status, one of 'success' | 'fail' | 'rejected' */
                status: string;
                /** @description Message */
                message: string;
                /** @description Index of contract */
                index?: number;
                /** @description Transaction ID */
                txId: string;
                /** @description Metadata */
                meta?: string;
                /** @description Created app index */
                createdIndex?: number;
              };
              error?: {
                /** @description Error object */
                message?: string;
              };
            };
          };
        };
      };
    };
  };
  "/rodeo/project/{id}": {
    /**
     * ProjectVote 
     * @description Votes on project
     */
    post: {
      parameters: {
        query: {
          /** @description App index of project to vote on */
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description UUID of active NCC user */
            uuid: string;
            /** @description For this endpoint, route is 'vote' */
            route: string;
            /** @description Value of vote */
            vote: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/rodeo/project/create": {
    /**
     * ProjectCreate 
     * @description Creates a new project
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description For this endpoint, route is 'create' */
            route: string;
            /** @description UUID of active NCC user */
            uuid: string;
            /** @description Algorand address of project creator */
            creatorAddress: string;
            /** @description URL of new project */
            url: string;
            /** @description Title of new project */
            title: string;
            /** @description Description of new project */
            description: string;
            /** @description Org ID to associate new project */
            org_id: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/rodeo/project/all": {
    /**
     * ProjectFetchAllByOrg 
     * @description Fetch all projects by organization ID
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description For this endpoint, route is 'fetchByOrgId' */
            route: string;
            /** @description UUID of active NCC user */
            uuid: string;
            /** @description ID of organization */
            org_id: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/ttm/receive": {
    /**
     * ReceiveTTM 
     * @description Receive TTM
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description UUID of active NCC user */
            uuid: string;
            /** @description Last blockchain round to search */
            lastRound: number;
            config: {
              /** @description TTM config, TODO fix this; Swagger needs nested objects to be defined */
              todo: string;
            };
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/ttm/send": {
    /**
     * SendTTM 
     * @description Send TTM
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description UUID of active NCC user */
            uuid: string;
            /** @description ASA ID of token to target */
            tokenToTarget: number;
            /** @description Message to send */
            message: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/get-nccs": {
    /**
     * GetNCCs 
     * @description Get NCCs
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Algorand address to receive testnet NCC tokens */
            address: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/get-access-token": {
    /**
     * GetAccessToken 
     * @description Get access token
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Algorand address of user */
            address: string;
            /** @description ID of signed atomic transaction to get NCC token */
            txId: string;
            /** @description Base64 encoded string of signed transaction */
            signedTx: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description The access token */
                token: string;
                /** @description Date of expiry (ms since epoch) */
                expires: number;
              };
              error: {
                /**
                 * @description Error message
                 * 
                 * If the address already has an access token, just return that
                 * 
                 * MainNet NCC token is: 1089370737
                 * MainNet SLA is: 1090801931
                 */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/deregister-account": {
    /**
     * DeRegisterUser 
     * @description De-register a user account
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Active NCC user uuid to de-register */
            uuid: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/user/deregister": {
    /**
     * DeregisterUser 
     * @description Deregister an NCC user
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Active NCC user uuid to de-register */
            uuid: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description String of result, TODO fix this to be accurate */
                message: string;
              };
              error: {
                /** @description String of error, TODO fix this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/fund-account": {
    /**
     * FundUser 
     * @description Fund a user account
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Active NCC user uuid to fund */
            uuid: string;
            /** @description ID of asset to fund, defaults to Algo */
            asaId: number;
            /** @description Amount to fund user */
            amount: number;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/list-accounts": {
    /**
     * ListAccounts 
     * @description List accounts
     */
    post: {
      parameters: {
        query: {
          /** @description Pagination limit, defaults to 10 */
          limit: string;
          /** @description Page, defaults to 1 */
          page: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Algorand address of creator */
            creatorAddress: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/user/opt-into-app": {
    /**
     * OptUserApp 
     * @description Opt user account into app
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Active NCC user uuid to opt-in */
            uuid: string;
            /** @description ID of app to opt-in */
            appId: number;
            /** @description Comma-separated string of app arguments, up to 8 */
            appArgs: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO fix this */
                message: string;
              };
              error: {
                /** @description Message of error, TODO fix this nested obj */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/opt-user-into-app": {
    /**
     * OptUserApp 
     * @description Opt user account into app
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Active NCC user uuid to opt-in */
            uuid: string;
            /** @description ID of app to opt-in */
            appId: number;
            /** @description Comma-separated string of app arguments, up to 8 */
            appArgs: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/user/opt-into-token": {
    /**
     * OptUserToken 
     * @description Opt user account into token
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Active NCC user uuid to opt-in */
            uuid: string;
            /** @description ID of asset to opt-in, defaults to Algo */
            asaId: number;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO fix this nested obj */
                message: string;
              };
              error: {
                /** @description Message of error, TODO fix this nested obj */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/opt-account-into-token": {
    /**
     * OptUserToken 
     * @description Opt user account into token
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Active NCC user uuid to opt-in */
            uuid: string;
            /** @description ID of asset to opt-in, defaults to Algo */
            asaId: number;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/user/register": {
    /**
     * RegisterUser 
     * @description Register a user account
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Active NCC user uuid */
            uuid: string;
            /** @description Algorand address of creator */
            creatorAddress: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: Record<string, never>;
              error: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/register-account": {
    /**
     * RegisterUser 
     * @description Register a user account
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Active NCC user uuid */
            uuid: string;
            /** @description Algorand address of creator */
            creatorAddress: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/register-accounts": {
    /**
     * RegisterUsers 
     * @description Batch register user accounts
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid NCC access token */
            accessToken: string;
            /** @description Algorand address of creator */
            creatorAddress: string;
            /** @description Base64 encoded CSV string of users to create */
            csv: string;
          };
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              /** @description Status of response, either 'success' or 'fail */
              status: string;
              /** @description Message of response */
              message: string;
              result: {
                /** @description Message of result, TODO update this to be accurate */
                message: string;
              };
              error: {
                /** @description Message of error, TODO update this to be accurate */
                message: string;
              };
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export type components = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
