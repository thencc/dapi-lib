{
  "version": 3,
  "sources": ["../src/index.ts", "../src/dapis/NCCdAPIs.ts", "../src/dapis/NCCRodeo.ts", "../src/dapis/NCCBricks.ts", "../src/dapis/NCCLiNR.ts", "../src/dapis/NCCToken.ts", "../src/dapis/NCCTTM.ts", "../src/dapis/NCCUser.ts", "../src/types.ts", "../src/dapis/NCCHappyDapi.ts"],
  "sourcesContent": ["import NCCHappyDapi from './dapis/NCCHappyDapi';\nimport NCCEndUser from './end-user/NCCEndUser';\nimport { NCCDapiConfig } from './types';\n\nexport * from './types';\nexport default class dapiLib {\n    dapis: NCCHappyDapi | null = null;\n    endUser: NCCEndUser | null = null; // TODO\n\n    public constructor(config: NCCDapiConfig) {\n        if (!config.algonaut) throw new Error('Invalid algonaut instance');\n\n        // Initialize Happy Dapi\n        this.dapis = new NCCHappyDapi(config.excludes);\n        this.dapis.init(config.algonaut);\n    }\n\n}\n\n// class dapiLib {\n//     types: {\n//         // request\n//         // response\n//     }\n//     dAPIs: {\n//         config: {\n//             // configure which dAPIs to use in dApp\n//             // algonaut config for NCCToken\n//         },\n//         NCCToken: {\n//             // required\n//             // configure SLA contract, get access token\n//         },\n//         NCCUser: {\n//             // required?\n//             // approve user requests if admin of an org ? or is this end-user?\n//         },\n//         NCCRodeo: {},\n//         NCCTTM: {},\n//         NCCLiNR: {},\n//         NCCBricks: {},\n//         NCCPeels: {}\n//     },\n\n//     endUser: {\n//         algonaut: {\n//             // configure end-user algonaut\n//         },\n//         api: {\n//             // rodeo/project vote\n//             // rodeo/task accept\n\n//             // flow for new Algo account to NCC user\n\n//             // what other API calls should we enable for end-user?\n//             //      especially if revenue stream is from NCC access token-gated dAPIs?\n//         }\n//     }\n// }", "// To hit the production machine\nconst APIRootURI = 'https://nccdapi.web.app';\n// or to hit Localhost emulator:\n// const APIRootURI = 'http://localhost:5001/nccdapi/us-central1/NCCdAPIsV1';\n\nfunction sanityCheck(apiEndpoint: string, data: any) {\n\tconsole.log('sanity check');\n\tif (!data.accessToken) {\n\t\tconsole.warn('YOU HAVE NO API KEY!  Just sayin');\n\t}\n\n\tif (!apiEndpoint) {\n\t\tthrow new Error('you must provide an api endpoint!');\n\t}\n}\n\nexport const NCCdAPIs = {\n\tcall: async function (apiEndpoint: string, data: any, apiVersion?: string) {\n\t\tsanityCheck(apiEndpoint, data);\n\t\tconst version = apiVersion ? apiVersion : 'v1';\n\t\tconsole.log(`running call to ${version}/${apiEndpoint}`);\n\t\tlet jsn = {} as any;\n\t\ttry {\n\t\t\t// in 2022, i feel like we can just go with Fetch.\n\t\t\tconst response = await fetch(`${APIRootURI}/${version}/${apiEndpoint}`, {\n\t\t\t\t// TBD: we can make a map of API calls and their methods and look that up here\n\t\t\t\tmethod: 'POST', // *GET, POST, PUT, DELETE, etc.\n\t\t\t\tcache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(data)\n\t\t\t});\n\n\t\t\tjsn = await response.json();\n\t\t\tconsole.log('NCCdAPIs.ts: got response!', jsn);\n\t\t\treturn jsn as any; // NCCdApiResponse;\n\t\t} catch (er: any) {\n\t\t\tconsole.log('there was an error ', er);\n\t\t\treturn {\n\t\t\t\trequestStatus: 'fail',\n\t\t\t\trequestError: er,\n\t\t\t\trequestErrorMessage: er.message\n\t\t\t} as any; // NCCdApiResponse;\n\t\t}\n\t},\n\trequestToken() { },\n\tfetch: async function (apiEndpoint: string, data: any, apiVersion?: string) {\n\t\tsanityCheck(apiEndpoint, data);\n\t\tconst version = apiVersion ? apiVersion : 'v1';\n\t\tconsole.log(`running fetch to ${version}/${apiEndpoint}`);\n\t\tlet jsn = {} as any;\n\t\ttry {\n\t\t\t// in 2022, i feel like we can just go with Fetch.\n\t\t\tconst response = await fetch(`${APIRootURI}/${version}/${apiEndpoint}`, {\n\t\t\t\t// TBD: we can make a map of API calls and their methods and look that up here\n\t\t\t\tmethod: 'GET', // *GET, POST, PUT, DELETE, etc.\n\t\t\t\tcache: 'no-cache' // *default, no-cache, reload, force-cache, only-if-cached\n\t\t\t});\n\n\t\t\tconsole.log('got response!');\n\t\t\tjsn = await response.json();\n\t\t\treturn jsn as any; // NCCdApiResponse;\n\t\t} catch (er: any) {\n\t\t\tconsole.log('there was an error ', er);\n\t\t\treturn {\n\t\t\t\trequestStatus: 'fail',\n\t\t\t\trequestError: er,\n\t\t\t\trequestErrorMessage: er.message\n\t\t\t} as any; // NCCdApiResponse;\n\t\t}\n\t}\n};\n", "import { MintOrgInput, UpdateOrgInput, CreateOrgInput, CreateOrgResponse, OrgAllResponse, FetchOrgResponse, FetchAllProjectsResponse, FetchProjectResponse } from \"../types\";\nimport { NCCdAPIs } from \"./NCCdAPIs\";\n\nexport default class NCCRodeo {\n    private static instance: NCCRodeo | null;\n\n    private accessToken: string = '';\n\n    private constructor() { }\n\n    public static destroy() {\n        if (NCCRodeo.instance) {\n            NCCRodeo.instance = null;\n        }\n    }\n\n    public static getInstance(accessToken: string) {\n        if (accessToken.length == 0) return null;\n        if (!NCCRodeo.instance) {\n            NCCRodeo.instance = new NCCRodeo();\n        }\n\n        NCCRodeo.instance.accessToken = accessToken;\n        return NCCRodeo.instance;\n    }\n\n    public static getOrgStatus(num: number) {\n        switch (num) {\n            case 1:\n                return 'Active';\n            default:\n                return 'Undefined state'\n        }\n    }\n\n    public async mintOrg(input: MintOrgInput) {\n        const data = {\n            accessToken: this.accessToken,\n            route: 'mint',\n            uuid: input.uuid\n        };\n\n        try {\n            const response = await NCCdAPIs.call('rodeo/org/' + input.orgName, data);\n            console.log('mint org resposne: ', response);\n            return response;\n        } catch (er) {\n            console.log('there was an error ', er);\n            return null;\n        }\n    }\n\n    public async updateOrg(input: UpdateOrgInput) {\n        const data = {\n            accessToken: this.accessToken,\n            uuid: input.uuid,\n            route: 'update',\n            edits: input.data\n        };\n\n        try {\n            const response = await NCCdAPIs.call('rodeo/org/' + input.orgName, data);\n            console.log('the edit response is: ', response);\n        } catch (er) {\n            console.log('there was an error ', er);\n        }\n    }\n\n    public async createOrg(input: CreateOrgInput) {\n        const data = {\n            accessToken: this.accessToken,\n            ...input\n        };\n\n        console.log('data is: ', data);\n\n        try {\n            const response = await NCCdAPIs.call('rodeo/org/create', data) as CreateOrgResponse;\n            console.log('org creation response: ', response);\n            return response;\n        } catch (er) {\n            console.log('there was an error ', er);\n            return null;\n        }\n    }\n\n    public async getAllOrgs(uuid: string) {\n        if (uuid.length == 0) {\n            console.error('Invalid UUID');\n            return null;\n        }\n        const data = {\n            accessToken: this.accessToken,\n            uuid: uuid\n        };\n        const response = await NCCdAPIs.call('rodeo/test', data) as OrgAllResponse;\n        return response;\n    }\n\n    public async getOrgByAppId(uuid: string, appId: number) {\n        if (uuid.length == 0 || appId == 0) {\n            if (uuid.length == 0) console.error('Invalid UUID');\n            if (appId == 0) console.error('Invalid org app ID');\n            return null;\n        }\n\n        const data = {\n            accessToken: this.accessToken,\n            uuid: uuid,\n            route: 'fetchByAppId'\n        };\n\n        const path = 'rodeo/org/' + appId;\n\n        try {\n            const response = await NCCdAPIs.call(path, data) as FetchOrgResponse;\n            console.log('response of fetch: ', response);\n            return response;\n        } catch (er) {\n            console.error('there was an error: ', er);\n            return null;\n        }\n    }\n\n    public async getOrgByName(uuid: string, name: string) {\n        if (uuid.length == 0 || name.length == 0) {\n            if (uuid.length == 0) console.error('Invalid UUID');\n            if (name.length == 0) console.error('Invalid org name');\n            return null;\n        }\n        const data = {\n            accessToken: this.accessToken,\n            uuid: uuid,\n            route: 'fetch'\n        };\n\n        const path = 'rodeo/org/' + name;\n\n        try {\n            const response = await NCCdAPIs.call(path, data) as FetchOrgResponse;\n            console.log('response: ', response);\n            return response;\n        } catch (er) {\n            console.log('there was an error ', er);\n            return null;\n        }\n    }\n\n    public async createProject(uuid: string, creatorAddr: string,\n        url: string,\n        title: string,\n        description: string,\n        org_id: string,) {\n\n        const data = {\n            accessToken: this.accessToken,\n            route: 'create',\n            uuid: uuid,\n            creatorAddress: creatorAddr, // TODO should this be an object variable?\n            url,\n            title,\n            description,\n            org_id\n        };\n\n        const path = 'rodeo/project/create';\n        try {\n            const response = await NCCdAPIs.call(path, data);\n            console.log('project creation response: ', response);\n            return response;\n        } catch (er) {\n            console.log('there was an error ', er);\n            return null;\n        }\n    }\n\n    public async fetchProjectsByOrgId(uuid: string, org_id: string) {\n        const data = {\n            accessToken: this.accessToken,\n            uuid,\n            route: 'fetchByOrgId',\n            org_id\n        };\n        const path = 'rodeo/project/all';\n        try {\n            const response = await NCCdAPIs.call(path, data);\n            console.log('fetch projects by org response: ', response);\n            return response as FetchAllProjectsResponse;\n        } catch (er) {\n            console.log('there was an error ', er);\n            return null;\n        }\n    }\n\n    public async fetchProject(uuid: string, project_id: number) {\n        const data = {\n            accessToken: this.accessToken,\n            uuid,\n            route: 'fetch'\n        };\n        const path = 'rodeo/project/' + project_id;\n        try {\n            const response = await NCCdAPIs.call(path, data);\n            console.log('fetch projects by org response: ', response);\n            return response as FetchProjectResponse;\n        } catch (er) {\n            console.log('there was an error ', er);\n            return null;\n        }\n    }\n\n    public async fetchAllMilestonesByProject(uuid: string, project_id: string) {\n        const data = {\n            accessToken: this.accessToken,\n            uuid,\n            route: 'fetchByProjectId',\n            project_id\n        }\n        const path = 'rodeo/milestone/all';\n        try {\n            const response = await NCCdAPIs.call(path, data);\n            console.log('fetch milestones by project response: ', response);\n            return response;\n        } catch (er) {\n            console.log('there was an error ', er);\n            return null;\n        }\n    }\n\n    public async createMilestone(uuid: string, creatorAddr: string,\n        url: string,\n        title: string,\n        description: string,\n        project_id: string,\n        data: string,\n        approverUUID: string) {\n\n        try {\n            const requestData = {\n                accessToken: this.accessToken,\n                uuid,\n                creatorAddress: creatorAddr,\n                route: 'create',\n                title,\n                description,\n                url,\n                data,\n                project_id,\n                approverUUID\n            };\n\n            const path = 'rodeo/milestone/create';\n            const response = await NCCdAPIs.call(path, requestData);\n            console.log('milestone creation response: ', response);\n            return response;\n        } catch (er) {\n            console.log('there was an error ', er);\n            return null;\n        }\n    }\n\n    public async fetchMilestone(uuid: string, milestone_id: number) {\n        const data = {\n            accessToken: this.accessToken,\n            uuid,\n            route: 'fetch'\n        };\n        const path = 'rodeo/milestone/' + milestone_id;\n        try {\n            const response = await NCCdAPIs.call(path, data);\n            console.log('fetch milestone by id: ', response);\n            return response;\n        } catch (er) {\n            console.log('there was an error ', er);\n            return null;\n        }\n    }\n}", "import { NCCdAPIs } from \"./NCCdAPIs\";\n\nclass NCCBricks {\n    private static instance: NCCBricks | null;\n\n    private accessToken: string = '';\n\n    private constructor() { }\n\n    public static destroy() {\n        if (NCCBricks.instance) {\n            NCCBricks.instance = null;\n        }\n    }\n\n    public static getInstance(accessToken: string) {\n        if (accessToken.length == 0) return null;\n        if (!NCCBricks.instance) {\n            NCCBricks.instance = new NCCBricks();\n        }\n\n        NCCBricks.instance.accessToken = accessToken;\n        return NCCBricks.instance;\n    }\n\n    async sendBricks(uuid: string, toAddress: string, toAppIndex: number) {\n        try {\n            const data = {\n                accessToken: this.accessToken,\n                uuid,\n                amount: 1000, // one for now\n                toAddress,\n                toAppIndex,\n            };\n            const response = await NCCdAPIs.call('bricks/send', data);\n\n            console.log('got response!', response);\n        } catch (er) {\n            console.log('there was an error ', er);\n        }\n    }\n    async sendRickToMedia(uuid: string, toAddress: string, toAppIndex: number) {\n        try {\n            const data = {\n                accessToken: this.accessToken,\n                uuid,\n                amount: 1000, // one for now\n                toAddress,\n                toAppIndex,\n            };\n            const response = await NCCdAPIs.call('bricks/send-rick', data);\n\n            console.log('got response!', response);\n        } catch (er) {\n            console.log('there was an error ', er);\n        }\n    }\n\n    async listBricks(creatorAddress: string) {\n        try {\n            if (creatorAddress.length == 0) throw new Error('Invalid creator address');\n            const data = {\n                accessToken: this.accessToken,\n                creatorAddress\n            };\n            const response = await NCCdAPIs.call('bricks/list', data);\n            console.log('got response!', response);\n            return response;\n        } catch (er) {\n            console.log('there was an error ', er);\n            return null;\n        }\n    }\n\n    async deployMedia(uuid: string, name: string, metadata: string, price: number,\n        publicPerformancePrice: number, creatorAddress: string) {\n        try {\n            if (uuid.length == 0) throw new Error('Invalid uuid');\n            if (name.length == 0) throw new Error('Invalid name');\n            if (creatorAddress.length == 0) throw new Error('Invalid creator address');\n            const data = {\n                accessToken: this.accessToken,\n                uuid,\n                name,\n                metadata,\n                price,\n                publicPerformancePrice,\n                creatorAddress,\n            };\n            const response = await NCCdAPIs.call('bricks/deploy-media', data);\n            console.log('got response!', response);\n            return response;\n        } catch (er) {\n            console.log('there was an error ', er);\n            return null;\n        }\n    }\n}\nexport default NCCBricks;", "import { LiNRResponse } from \"../types\";\nimport { NCCdAPIs } from \"./NCCdAPIs\";\n\nclass NCCLiNR {\n    private static instance: NCCLiNR | null;\n\n    private accessToken: string = '';\n\n    private constructor() { }\n\n    public static destroy() {\n        if (NCCLiNR.instance) {\n            NCCLiNR.instance = null;\n        }\n    }\n\n    public static getInstance(accessToken: string) {\n        if (accessToken.length == 0) return null;\n        if (!NCCLiNR.instance) {\n            NCCLiNR.instance = new NCCLiNR();\n        }\n\n        NCCLiNR.instance.accessToken = accessToken;\n        return NCCLiNR.instance;\n    }\n\n    async send(qText: string, ctx: string) {\n        try {\n            const data = {\n                accessToken: this.accessToken,\n                qText,\n                ctx,\n                respLength: 140\n            }\n            const response = await NCCdAPIs.call('linr/music', data) as LiNRResponse;\n\n            console.log('LiNR tests send, response is: ', response);\n            return response;\n        } catch (err) {\n            console.error('there was an error: ', err);\n            return null;\n        }\n    }\n\n    async sendMedia(qText: string, ctx: string) {\n        try {\n            const data = {\n                accessToken: this.accessToken,\n                qText,\n                ctx,\n                respLength: 140\n            };\n            const response = await NCCdAPIs.call('linr/media', data) as LiNRResponse;\n            console.log('LiNR tests send, response is: ', response);\n            return response;\n        } catch (err) {\n            console.error('there was an error: ', err);\n            return null;\n        }\n    }\n\n}\n\nexport default NCCLiNR;", "import Algonaut from \"@thencc/algonautjs\"\nimport { NCC_TOKEN_INDEX, NCC_TOKEN_AUTH_APP_INDEX, NCC_SLA_INDEX, USDC_TOKEN_INDEX } from \"../constants\";\nimport { NCCApiResponse } from \"../types\";\nimport { NCCdAPIs } from \"./NCCdAPIs\";\n\nclass NCCToken {\n    private static instance: NCCToken | null;\n\n    private address: string = '';\n    private algonaut: Algonaut | null = null;\n    public nccTokenBal: number = -1; // -1 if not opted into NCC token\n\n    private constructor() { }\n\n    public static destroy() {\n        if (NCCToken.instance) {\n            NCCToken.instance = null;\n        }\n    }\n\n    public static async getInstance(algonaut: Algonaut): Promise<NCCToken> {\n        if (!NCCToken.instance) {\n            NCCToken.instance = new NCCToken();\n        }\n\n        NCCToken.instance.algonaut = algonaut;\n        return NCCToken.instance;\n    }\n\n    public async getNCCBalance() {\n        if (!this.algonaut) throw new Error('Invalid algonaut');\n        if (!this.algonaut.account) throw new Error('No user logged in');\n        return await this.algonaut.getTokenBalance(\n            this.algonaut.account.address,\n            NCC_TOKEN_INDEX\n        );\n    }\n\n    public async isOptedNCC() {\n        if (!this.algonaut) throw new Error('Invalid algonaut');\n        if (!this.algonaut.account) throw new Error('No user logged in');\n        return await this.algonaut.isOptedIntoAsset({\n            account: this.algonaut.account.address,\n            assetId: NCC_TOKEN_INDEX\n        });\n    }\n\n    public async getAccessToken() {\n\n        try {\n            if (!this.algonaut) throw new Error('Invalid algonaut');\n            const tx = await this.algonaut.atomicCallApp({\n                appIndex: NCC_TOKEN_AUTH_APP_INDEX,\n                appArgs: ['get_token'],\n                optionalFields: {\n                    assets: [NCC_TOKEN_INDEX]\n                }\n            });\n\n            const txId = tx.transaction.txID().toString();\n            console.log('trying to sign this tx: ', tx);\n\n            if (!this.algonaut.walletState.activeWallet) throw new Error('No valid active wallet');\n\n            const txnArr = tx.transaction.toByte();\n\n            if (!this.algonaut.walletState.enabledWallets?.inkey) throw new Error('No valid inkey wallet');\n\n            console.log('hello this is me: ', this.algonaut);\n            const signedTxns = await this.algonaut.walletState.enabledWallets.inkey.signTransactions([txnArr]);\n            console.log(signedTxns);\n\n            const b64encoded = this.algonaut.txnBuffToB64(signedTxns[0]);\n\n            const response = await NCCdAPIs.call('get-access-token', {\n                address: this.address,\n                txId: txId,\n                signedTx: b64encoded\n            }) as NCCApiResponse;\n\n            console.log('got response!');\n            console.log(response);\n\n            if (!response) throw new Error('No access token response!');\n            return response;\n        } catch (error: any) {\n            console.log('there was an error ', error);\n            return {\n                status: 'fail',\n                message: \"Error getting access token\",\n                error,\n                result: null\n            } as NCCApiResponse;\n        }\n    }\n\n    public async refreshNCCBal() {\n        try {\n            if (!this.algonaut) throw new Error('Invalid algonaut');\n            const nccBal = await this.algonaut.getTokenBalance(\n                this.address,\n                NCC_TOKEN_INDEX\n            );\n            this.nccTokenBal = nccBal;\n        } catch (err: any) {\n            console.error('unable to refresh NCC balance: ', err);\n        }\n    }\n\n    public async getNCCs() {\n        const response = await NCCdAPIs.call('get-nccs', {\n            address: this.address\n        });\n        return response as NCCApiResponse;\n    }\n\n    public async createUserSLA(uuid: string) {\n        try {\n            if (!this.algonaut) throw new Error('Invalid algonaut');\n            if (!this.algonaut.account) throw new Error('No user logged in');\n            const isOpted = await this.isOptedNCC();\n            if (isOpted) {\n                return {\n                    status: 'success',\n                    message: \"Address already opted into NCCs\",\n                    error: null,\n                    result: {\n                        address: this.algonaut.account.address,\n                        isOpted\n                    }\n                } as NCCApiResponse;\n            }\n\n            const slaResult = await this.algonaut.sendTransaction([\n                await this.algonaut.atomicOptInApp({\n                    appIndex: NCC_SLA_INDEX,\n                    appArgs: [uuid]\n                }),\n                await this.algonaut.atomicOptInAsset(NCC_TOKEN_INDEX),\n                await this.algonaut.atomicOptInAsset(USDC_TOKEN_INDEX)\n            ]);\n            if (slaResult.error) throw slaResult.error;\n            if (slaResult.status == 'fail') throw new Error('Failed to opt-in to NCC SLA app');\n\n            console.log(slaResult);\n            const response = await this.getNCCs();\n            if (response.error) throw response.error;\n            if (response.status == 'fail') throw new Error('Failed to get NCCs for user SLA');\n\n            console.log(response);\n            return {\n                status: 'success',\n                message: \"Created SLA contract for address\",\n                error: null,\n                result: {\n                    address: this.algonaut.account.address,\n                    slaResult,\n                    nccDropResult: response.result\n                }\n            } as NCCApiResponse;\n        } catch (error: any) {\n            console.error('error in creating SLA contract: ', error);\n            return {\n                status: 'fail',\n                message: 'Error in creating SLA contract',\n                error,\n                result: null\n            } as NCCApiResponse\n        }\n    }\n}\n\nexport default NCCToken;", "import Algonaut from \"@thencc/algonautjs\";\nimport { NCCdAPIs } from \"./NCCdAPIs\";\nimport { TTMConfig } from \"../types\";\n\nclass NCCTTM {\n    private static instance: NCCTTM | null;\n\n    private accessToken: string = '';\n    private algonaut: Algonaut | null = null;\n\n    private constructor() { }\n\n    public static destroy() {\n        if (NCCTTM.instance) {\n            NCCTTM.instance = null;\n        }\n    }\n\n    public static getInstance(accessToken: string, algonaut: Algonaut) {\n        if (accessToken.length == 0) return null;\n        if (!NCCTTM.instance) {\n            NCCTTM.instance = new NCCTTM();\n        }\n        NCCTTM.instance.algonaut = algonaut;\n        NCCTTM.instance.accessToken = accessToken;\n        return NCCTTM.instance;\n    }\n\n    validConfig(config: TTMConfig) {\n        if (config.apiKey.length == 0 || config.appId.length == 0 ||\n            config.authDomain.length == 0 ||\n            config.messagingSenderId.length == 0 ||\n            config.projectId.length == 0 ||\n            config.storageBucket.length == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    async receive(uuid: string, lastRound: number, config: TTMConfig) {\n        try {\n            if (uuid.length == 0) {\n                throw new Error('Invalid UUID');\n            } else if (!this.validConfig(config)) {\n                throw new Error('Invalid TTM config');\n            }\n\n            const data = {\n                accessToken: this.accessToken,\n                uuid,\n                lastRound,\n                config\n            }\n\n            const response = await NCCdAPIs.call('ttm/receive', data);\n            return response;\n        } catch (err) {\n            console.error('there was an error: ', err);\n            return null;\n        }\n    }\n\n    async send(uuid: string, message: string, tokenToTarget: number) {\n        try {\n            if (!tokenToTarget || tokenToTarget == 0) {\n                throw new Error('Invalid token target value');\n            } else if (!message) {\n                throw new Error('Invalid message');\n            } else if (uuid.length == 0) {\n                throw new Error('Invalid UUID');\n            }\n\n            const data = {\n                accessToken: this.accessToken,\n                uuid,\n                tokenToTarget,\n                message\n            }\n\n            const response = await NCCdAPIs.call('ttm/send', data);\n            console.log('TTM tests send: response', response);\n            return response;\n        } catch (err) {\n            console.error('there was an error: ', err);\n            return null;\n        }\n    }\n\n    async optInToToken(tokenToOptInto: number) {\n        try {\n            if (!this.algonaut) throw new Error('Invalid algonaut');\n            if (tokenToOptInto == 0) throw new Error('Invalid token asset ID to opt into');\n            let txnResult = await this.algonaut.optInAsset(tokenToOptInto);\n            console.log('opt result: ', txnResult);\n            return txnResult;\n        } catch (err) {\n            console.error('there was an error: ', err);\n            return null;\n        }\n    }\n\n    async getTokens(userAddress: string) {\n        try {\n            if (!this.algonaut) throw new Error('Invalid algonaut');\n            if (userAddress.length == 0) throw new Error('Invalid user address');\n\n            console.log('fetching tokens for ' + userAddress);\n\n            const accountInfo = await this.algonaut.getAccountInfo(\n                userAddress\n            );\n\n            let mySendTokens = [] as any;\n\n            for (let i = 0; i < accountInfo.assets.length; i++) {\n                const asset = accountInfo.assets[i];\n                if (asset.amount) {\n                    const assetId = asset['asset-id'];\n                    const assetInfo = await this.algonaut.getAssetInfo(assetId);\n                    console.log(assetInfo);\n                    mySendTokens.push({\n                        id: assetInfo.index,\n                        name: assetInfo.params['unit-name'] + ' - ' + assetInfo.params.name\n                    });\n                }\n            }\n\n            return mySendTokens;\n\n        } catch (err) {\n            console.error('there was an error: ', err);\n            return [];\n        }\n    }\n}\n\nexport default NCCTTM;", "import { NCCApiResponse, DeRegisterResponse, FundOptInResponse, UserResponse, OptInAppResponse } from \"../types\";\nimport { NCCdAPIs } from \"./NCCdAPIs\";\n\nclass NCCUser {\n    private static instance: NCCUser | null;\n\n    private accessToken: string = '';\n\n    private constructor() { }\n\n    public static getInstance(accessToken: string) {\n        if (accessToken.length == 0) return null;\n        if (!NCCUser.instance) {\n            NCCUser.instance = new NCCUser();\n        }\n        NCCUser.instance.accessToken = accessToken;\n        return NCCUser.instance;\n    }\n\n    public static destroy() {\n        if (NCCUser.instance) {\n            NCCUser.instance = null;\n        }\n    }\n\n    public async registerUser(uuid: string, creatorAddr: string): Promise<any> {\n        if (this.accessToken && uuid.length && creatorAddr.length) {\n            console.log('registering user...');\n\n            const response = await NCCdAPIs.call('register-account', {\n                accessToken: this.accessToken,\n                uuid: uuid,\n                creatorAddress: creatorAddr\n            }) as NCCApiResponse;\n\n            console.log(response);\n            return response\n        } else {\n            alert('you need a token and some data!');\n            return null;\n        }\n    }\n\n    public async deregisterUser(uuid: string) {\n        if (this.accessToken && uuid.length) {\n            console.log('de-registering user');\n            const response = await NCCdAPIs.call('deregister-account', {\n                accessToken: this.accessToken,\n                uuid: uuid\n            }) as DeRegisterResponse;\n            console.log(response);\n            return response;\n        } else {\n            alert('you need a token and some data!');\n            return null;\n        }\n    }\n\n    public async fundAccount(uuid: string, amount: number, asaId: number) {\n        if (this.accessToken && uuid.length && amount) {\n            console.log('funding...');\n\n            const response = await NCCdAPIs.call('fund-account', {\n                accessToken: this.accessToken,\n                uuid: uuid,\n                asaId: asaId,\n                amount: amount\n            });\n\n            console.log(response);\n            return response as FundOptInResponse;\n        } else {\n            alert('you need a token and some data!');\n            return null;\n        }\n    }\n\n    public async getAllAccounts(creatorAddr: string) {\n        if (this.accessToken && creatorAddr.length > 0) {\n            const response = await NCCdAPIs.call('list-accounts', {\n                accessToken: this.accessToken,\n                creatorAddress: creatorAddr\n            });\n\n            console.log('got response!', response);\n            return response as UserResponse;\n        }\n        return null;\n    }\n\n    public async accountOptInApp(uuid: string, appId: number, appArgs: string) {\n        if (this.accessToken && uuid.length) {\n            console.log('opting account into app...');\n\n            const response = await NCCdAPIs.call('opt-account-into-app', {\n                accessToken: this.accessToken,\n                uuid: uuid,\n                appId: appId,\n                appArgs: appArgs\n            });\n\n            console.log(response);\n            return response as OptInAppResponse;\n        } else {\n            alert('you need a token and some data!');\n            return null;\n        }\n    }\n\n    public async accountOptInToken(uuid: string, asaId: number) {\n        if (this.accessToken && uuid.length && asaId) {\n            console.log('opt in...');\n\n            const response = await NCCdAPIs.call('opt-account-into-token', {\n                accessToken: this.accessToken,\n                uuid: uuid,\n                asaId: asaId\n            });\n\n            console.log(response);\n            return response as FundOptInResponse;\n        } else {\n            alert('you need a token and some data!');\n            return null;\n        }\n    }\n}\n\nexport default NCCUser;", "import Algonaut from \"@thencc/algonautjs\";\n\nexport enum NCCDapiTypes {\n    Rodeo = 'rodeo',\n    TTM = 'ttm',\n    LiNR = 'linr',\n    Bricks = 'bricks',\n    Peels = 'peels'\n}\n\nexport type NCCDapiConfig = {\n    algonaut: Algonaut,\n    excludes?: NCCDapiTypes[]\n}\n\nexport type NCCApiResponse = {\n    status: 'success' | 'fail';\n    result: any;\n    error: any;\n    message: string;\n}\n\nexport type CreateProjectInput = {\n    url: string;\n    title: string;\n    description: string;\n    org_id: string;\n}\n\nexport type CreateOrgInput = {\n    orgName: string;\n    url: string;\n    description: string;\n    totalMembers: string;\n    totalAdmins: string;\n    uuid: string;\n    creatorAddress: string;\n}\n\nexport type CreateMilestoneInput = {\n    url: string,\n    title: string,\n    description: string,\n    project_id: string,\n    data: string,\n    approverUUID: string\n}\n\nexport type MintOrgInput = {\n    uuid: string;\n    orgName: string;\n}\n\nexport type UpdateOrgInput = {\n    uuid: string;\n    orgName: string;\n    data: any;\n}\n\nexport type CreateOrgResponse = {\n    valid: boolean;\n    data: {\n        appIndex: number;\n        contractAddress: string;\n        orgId: string;\n    };\n    route: string;\n    message: string;\n}\n\nexport type OrgGlobalState = {\n    orgName: string;\n    url: string;\n    uuid: string;\n    totalMembers: string;\n    contractAddress: string;\n    creatorAddress: string;\n    id: string;\n    totalAdmins: string;\n    accessToken: string;\n    description: string;\n    debug: string;\n    name: string;\n    admin: string;\n    data: string;\n    total_admins: number;\n    member_asset_id: number | null;\n    status: number;\n    total_members: number;\n    admin_asset_id: number | null;\n}\n\nexport type FetchOrgResponse = {\n    valid: boolean;\n    route: string;\n    message: string;\n    requestStatus: string;\n    result: OrgGlobalState;\n}\n\nexport type OrgResponse = {\n    uuid: string;\n    contractAddress: string;\n    url: string;\n    accessToken: string;\n    totalMembers: string;\n    description: string;\n    orgName: string;\n    id: string;\n    creatorAddress: string;\n    totalAdmins: string;\n    adminAssetID: number;\n    memberAssetID: number;\n}\n\nexport type OrgAllResponse = {\n    valid: boolean;\n    data: OrgResponse[];\n    route: string;\n    message: string;\n    requestStatus: string;\n}\n\nexport type FetchAllProjectsResponse = {\n    message: string;\n    requestStatus: string;\n    route: string,\n    result: ProjectResponse[]\n}\n\nexport type ProjectResponse = {\n    creatorAccessToken: string;\n    description: string;\n    contractAddress: string;\n    id: number;\n    title: string;\n    creatorAddress: string;\n    url: string;\n    orgId: number;\n    status: number;\n}\n\nexport type ProjectGlobalState = {\n    data: string;\n    description: string;\n    admin: string;\n    org_id: string;\n    status: any | null; // TODO\n    title: string;\n    votes: any | null; // TODO\n    url: string;\n}\n\nexport type FetchProjectResponse = {\n    message: string;\n    requestStatus: string;\n    route: string;\n    result: ProjectGlobalState;\n}\n\n\nexport type UserResponse = {\n    data: any;\n    message: string;\n    status: string;\n}\n\nexport type RegisterResponse = {\n    status: string;\n    message: string;\n    contractId: number;\n    contractAddress: string;\n    result: {\n        status: string;\n        message: string;\n        txId: string;\n        createdIndex: number;\n        meta: any;\n    };\n    fundAndOptInStatus: any;\n    dataTransactionStatus: any;\n};\n\nexport type DeRegisterResponse = {\n    status: string;\n    message: string;\n    contractId: number;\n    contractAddress: string;\n    result: {\n        status: string;\n        message: string;\n        txId: string;\n    }\n}\n\nexport type FundOptInResponse = {\n    status: string;\n    message: string;\n    fundAndOptInStatus: {\n        status: string;\n        message: string;\n        txId: string;\n    }\n}\n\nexport type OptInAppResponse = {\n    status: string;\n    message: string;\n    optInStatus: {\n        status: string;\n        message: string;\n        txId: string;\n    }\n}\n\nexport type TTMConfig = {\n    apiKey: string;\n    authDomain: string;\n    projectId: string;\n    storageBucket: string;\n    messagingSenderId: string;\n    appId: string;\n}\n\nexport type TTMMessage = {\n    id: string;\n    messageType: string;\n    messageTokens: string[];\n    messageString: string;\n    messageRound: number;\n    createdAt: any;\n    status: number;\n};\n\nexport type TokenResponse = {\n    status: string;\n    message: string;\n    error: string;\n    txDetail: {\n        status: string;\n        message: string;\n        txId: string;\n    }\n};\n\nexport type AccessTokenResponse = {\n    status: string;\n    message: string;\n    data: {\n        token: string;\n        expires: number;\n        validFor: number;\n    },\n    error: string;\n    confirmedInRound: {\n        status: string;\n        message: string;\n        txId: string;\n    },\n    dbUUID: string;\n};\n\nexport type LiNRResponse = {\n    status: string;\n    message: string;\n    error: string;\n    data: {\n        status: string;\n        engine: number;\n        content: string;\n    }\n};", "import { NCCdAPIs } from \"./NCCdAPIs\";\n\nimport NCCRodeo from \"./NCCRodeo\";\nimport NCCBricks from \"./NCCBricks\";\nimport NCCLiNR from \"./NCCLiNR\";\nimport NCCToken from \"./NCCToken\";\nimport NCCTTM from \"./NCCTTM\";\nimport NCCUser from \"./NCCUser\";\nimport Algonaut from \"@thencc/algonautjs\";\nimport { NCCDapiTypes } from \"../types\";\n\n/**\n * TODOs:\n * []   implement Peels lib\n */\n\nexport default class NCCHappyDapi {\n    rodeo: NCCRodeo | null = null;\n    bricks: NCCBricks | null = null;\n    linr: NCCLiNR | null = null;\n    ttm: NCCTTM | null = null;\n    user: NCCUser | null = null;\n\n    token: NCCToken | null = null;\n\n    algonaut: Algonaut | null = null;\n\n    docs = NCCdAPIs.call('docs', {});\n    dAPI = NCCdAPIs;\n\n    excludes: NCCDapiTypes[] | null = null;\n\n    public constructor(excludes?: NCCDapiTypes[]) {\n        if (excludes) {\n            this.excludes = excludes;\n        }\n    }\n\n    public async init(algonaut: Algonaut) {\n        // initialize ncc token\n        console.log('getting NCC Token instance...');\n        const token = await NCCToken.getInstance(algonaut);\n        this.algonaut = algonaut;\n        this.token = token;\n        console.log('initialized NCC\\'s happy dapi');\n    }\n\n    public static destroyAll() {\n        NCCToken.destroy();\n        NCCUser.destroy();\n        NCCRodeo.destroy();\n        NCCTTM.destroy();\n        NCCLiNR.destroy();\n        NCCBricks.destroy();\n        console.log('destroyed all services');\n    }\n\n    serviceSpecified(service: NCCDapiTypes) {\n        return (!this.excludes) || (this.excludes && !this.excludes.includes(service))\n    }\n\n    public startServices(accessToken: string) {\n        // if valid config, start all\n        if (!this.algonaut) {\n            console.error('Invalid algonaut instance');\n            return false;\n        }\n        if (!this.algonaut.account) {\n            console.error('No user logged in');\n            return false;\n        }\n\n        if (this.algonaut.account.address && accessToken.length) {\n\n            // start specified services\n            if (this.serviceSpecified(NCCDapiTypes.Rodeo)) this.rodeo = NCCRodeo.getInstance(accessToken);\n            if (this.serviceSpecified(NCCDapiTypes.Bricks)) this.bricks = NCCBricks.getInstance(accessToken);\n            if (this.serviceSpecified(NCCDapiTypes.LiNR)) this.linr = NCCLiNR.getInstance(accessToken);\n            if (this.serviceSpecified(NCCDapiTypes.TTM)) this.ttm = NCCTTM.getInstance(accessToken, this.algonaut);\n            this.user = NCCUser.getInstance(accessToken);\n\n            console.log('started services');\n            return true;\n        }\n        return false;\n    }\n}"],
  "mappings": "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",
  "names": ["src_exports", "__export", "NCCDapiTypes", "dapiLib", "__toCommonJS", "APIRootURI", "sanityCheck", "apiEndpoint", "data", "NCCdAPIs", "apiVersion", "version", "jsn", "er", "response", "NCCRodeo", "accessToken", "num", "input", "data", "response", "NCCdAPIs", "er", "__spreadValues", "uuid", "appId", "path", "name", "creatorAddr", "url", "title", "description", "org_id", "project_id", "approverUUID", "requestData", "milestone_id", "NCCBricks", "accessToken", "uuid", "toAddress", "toAppIndex", "data", "response", "NCCdAPIs", "er", "creatorAddress", "name", "metadata", "price", "publicPerformancePrice", "NCCBricks_default", "NCCLiNR", "accessToken", "qText", "ctx", "data", "response", "NCCdAPIs", "err", "NCCLiNR_default", "NCCToken", "algonaut", "_a", "tx", "txId", "txnArr", "signedTxns", "b64encoded", "response", "NCCdAPIs", "error", "nccBal", "err", "uuid", "isOpted", "slaResult", "NCCToken_default", "NCCTTM", "accessToken", "algonaut", "config", "uuid", "lastRound", "data", "NCCdAPIs", "err", "message", "tokenToTarget", "response", "tokenToOptInto", "txnResult", "userAddress", "accountInfo", "mySendTokens", "i", "asset", "assetId", "assetInfo", "NCCTTM_default", "NCCUser", "accessToken", "uuid", "creatorAddr", "response", "NCCdAPIs", "amount", "asaId", "appId", "appArgs", "NCCUser_default", "NCCDapiTypes", "NCCHappyDapi", "excludes", "NCCdAPIs", "algonaut", "token", "NCCToken_default", "NCCUser_default", "NCCRodeo", "NCCTTM_default", "NCCLiNR_default", "NCCBricks_default", "service", "accessToken", "dapiLib", "config", "NCCHappyDapi"]
}
